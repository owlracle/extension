import{login,network,messageBus,ModalWindow}from"./utils.min.js";const advisor={speed:"75",fee:.1,maxFee:.1,set:async function(data){const properties=await this.get();Object.entries(data).forEach(([k,v])=>properties[k]=v),await chrome.storage.local.set({advisor:properties}),messageBus.send("advisor",properties)},get:async function(){const storage=await chrome.storage.local.get();return storage.advisor||await new Promise(resolve=>setTimeout(async()=>resolve(await this.get()),100))},init:async function(){const adv=await this.get();adv.speed&&(this.speed=adv.speed);const container=document.querySelector("#content #advisor");container.innerHTML=`<div id="content" class="logged">\n            <h2>Tx advisor</h2>\n            <div id="metamask-connected">\n                <img src="img/metamask-fox.svg" id="metamask-icon">\n                <div id="network-container">\n                    <span>Metamask connected to</span>\n                    <div id="network"></div>\n                </div>\n            </div>\n            <div id="enable-container">\n                <label><input id="allow" type="checkbox" class="checkbox" ${adv.enabled?"checked":""}>Allow me to submit gas price suggestions into your Metamask transaction</label>\n                <div id="cost-card">\n                    <div class="title"><span>Advice cost<i id="cost-help" class="fa-regular fa-circle-question"></i></span></div>\n                    <div class="body">\n                        <span class="value"></span>\n                        <span class="info">/ tx submitted</span>\n                    </div>\n                </div>\n            </div>\n            <h3>Transaction acceptance (speed)<i id="accept-help" class="fa-regular fa-circle-question"></i></h3>\n            <div id="speed-container">\n                <div id="label-container">\n                    <span>Slow</span>\n                    <span>Standard</span>\n                    <span>Fast</span>\n                    <span>Instant</span>\n                </div>\n                <input type="range" min="35" max="100" step="5" value="${this.speed}" class="range">\n            </div>\n        </div>`,container.querySelectorAll("input.range").forEach(e=>createInputRange(e));const allowCheck=container.querySelector("#allow");allowCheck.addEventListener("change",()=>{this.set({enabled:this.checked}).then(()=>{this.setCost()})}),container.querySelector("#cost-help").addEventListener("click",()=>{new ModalWindow({title:"Advisor costs",message:`\n                    <p>This action will deduct credit from your API account. But since our advice is awesome ðŸ¦‰, it will always be worth it.</p>\n\n                    <span>Cost:</span>\n                    <ul>\n                        <li><b>${(100*this.fee).toFixed(0)}%</b> of the predicted network fee.</li>\n                        <li>Maximum value: <b><code>$${this.maxFee}</code></b></li>\n                    </ul>\n\n                    <p>In most cases, the advisor saves you more than it costs. On the rare occasions it doesn't, it will prevent your transaction from being stuck in a congested network.</p>\n                `})}),container.querySelector("#accept-help").addEventListener("click",()=>{new ModalWindow({title:"Transaction acceptance",message:"\n                    <p>Owlracle will suggest a gas price for you. The higher the price, the higher the chance for your transaction to be accepted on each block.</p>\n                    <p>The speed slider tells Owlracle the desired percentage of blocks you wish your transaction to be accepted (on average).</p>\n                    <p>So a higher percentage means your transaction will be accepted earlier but you pay a higher price.</p>\n                "})}),messageBus.send("get-network",{},message=>{if(!message)return container.querySelector("#network-container #network").innerHTML='<b class="red">Unsupported network</b>',this.network=!1,this.setCost(),!1;const ntw=network.get(message);return container.querySelector("#network-container #network").innerHTML=`<img src="https://owlracle.info/img/${ntw.symbol}.png"><span>${ntw.name}</span>`,this.network=ntw,this.setCost(),!0})},setCost:async function(){const container=document.querySelector("#content #advisor"),card=container.querySelector("#cost-card"),valueBox=card.querySelector(".value");card.classList.remove("disabled");const advisorEnabled=(await this.get("enabled")).enabled;if(!this.network||!advisorEnabled)return card.classList.add("disabled"),void(valueBox.innerHTML="N/A");const query={source:"extension",apikey:login.get().apikey,accept:this.speed},data=await(await fetch(`https://owlracle.info/${this.network.symbol}/gas?${new URLSearchParams(query).toString()}`)).json();console.log(data);const value=Math.min(this.maxFee,data.speeds[0].estimatedFee*this.fee).toFixed(4);valueBox.innerHTML=`$${value}`}};function createInputRange(elem){const size=Array.from(document.querySelectorAll(".range-custom")).length;elem.id=`input-range-${size}`,elem.insertAdjacentHTML("afterend",`\n        <div id="range-custom-${size}" class="range-custom">\n            <div class="bar">\n                <div class="filled"></div>\n                <div class="thumb"></div>\n            </div>\n        </div>\n    `),elem.setAttribute("hidden",!0);const range=document.querySelector(`#range-custom-${size}`),thumb=range.querySelector(".thumb"),filled=range.querySelector(".filled"),moveRange=(e,ignoreButton)=>{if(e&&1===e.buttons||ignoreButton){const pos=e.offsetX/range.offsetWidth;elem.value=(parseInt(elem.max)-parseInt(elem.min))*pos+parseInt(elem.min)}if(!e||1===e.buttons||ignoreButton){thumb.innerHTML=elem.value;const newPos=(elem.value-parseInt(elem.min))/(parseInt(elem.max)-parseInt(elem.min))*100;filled.style.width=`${newPos}%`;const r=200-(elem.value-parseInt(elem.min))/(parseInt(elem.max)-parseInt(elem.min))*97,g=(elem.value-parseInt(elem.min))/(parseInt(elem.max)-parseInt(elem.min))*71+90;filled.style["background-color"]=`rgb(${r},${g},64)`}};moveRange(),range.addEventListener("mousemove",e=>moveRange(e)),range.addEventListener("click",e=>moveRange(e,!0)),range.addEventListener("mouseup",()=>{setTimeout(()=>{advisor.speed=elem.value,advisor.set({speed:elem.value}),advisor.setCost()},100)})}export default advisor;
//# sourceMappingURL=advisor.min.js.map